Implementation of the KleeQ protocol

1. Step 1: write an example config containing
				- names of communicating parties (pretty random)
				- addresses (ports, for local testing) for each of them
				

2. Step 2: Iterative prototyping
	
	Prototype 1: Clique Formation
		- multiple instances of the program start up at the config-specified ports
		- a clique is formed:
			1) one party takes the lead by a creating a singleton clique for itself
			2) the user creates a random secret
			3) iteratively the KleeQ:
				- invites one other user to join
				- MP DH happens to establish a new common secret among all clique members
		
		Goals: 
				> clique is formed
				> common secret S created using DH
				> initial key used for communication derived as K = MAC(S, N) 
													where N - name of clique
														
			  
	Prototype 2: Exchanging messages using Patching Algorithm
		- every party keeps a global transcript of the conversation
		- messages are exchanged by updating others on changes to
		  the transcript (patching)
		  
			Comment: algorithm based on Lamport timestamps 
					 (pseudocode in the paper)
		
		Goal: users can exchange msgs encrypted with K within the clique
		
		
	
	Prototype 3: Verification and Causal Blocks
		- to ensure correct transmission and protect against msg forgery,
		  make sure all clique memebers have the same view of the message
		  history
		- for this, use the block verification algorithm:
			1) the conversation is divided into blocks in a deterministic way
			   independently by each member, and then hashes of blocks are
			   compared. 
		    2) if hashes don't match, manual resolution required
			3) if they match, block is deleted ("sealed")
		- detailed verification algo pseudocode in the paper
		
		Goals:
				> authentication
				> integrity
				> forward secrecy (partially)
			  
	Prototype 4: Improve key management
		- after a block is sealed, update common secret and key like this:
			S' = MAC(K, S)
			K' = MAC(S, BLK_CONTENT)
		- each member of the clique does this independently,
		  values are same though
		- old keys are kept until it's certain noone else is going to use them
		- prepend address tag c = MAC(K, N + salt) to msg to efficiently
		  discover which key is being used in it (hashtable: tag -> key)
		  
		Goals:
				> forward and backward secrecy
	
	Prototype 5: Enable group contraction
		- to exclude user(s), form a new clique and disregard previous one
		
		Goal: users can join and leave
		
		